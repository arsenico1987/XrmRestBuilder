// =====================================================================
//  This file is part of the Microsoft Dynamics CRM SDK code samples.
//
//  Copyright (C) Microsoft Corporation.  All rights reserved.
//
//  This source code is intended only as a supplement to Microsoft
//  Development Tools and/or on-line documentation.  See these other
//  materials for detailed information regarding Microsoft code samples.
//
//  THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//  PARTICULAR PURPOSE.
// =====================================================================
"use strict"; Sdk.Mdq = Sdk.Mdq || { __namespace: !0 }, Sdk.Mdq.ValueEnums = Sdk.Mdq.ValueEnums || { __namespace: !0 }, function () { this.RetrieveMetadataChangesRequest = function (a, b, c) { function g(a) { if (!(a instanceof Sdk.Mdq.EntityQueryExpression)) throw new Error("Sdk.RetrieveMetadataChangesRequest.Query requires a Sdk.Mdq.EntityQueryExpression."); d = a } function h(a) { if (null == a) e = a; else { if ("string" != typeof a) throw new Error("Sdk.RetrieveMetadataChangesRequest ClientVersionStamp requires a string value or a null value."); e = a } } function i(a) { if (null == a) f = a; else { if (!(a >= 1 && a <= 31)) throw new Error("Sdk.RetrieveMetadataChangesRequest DeletedMetadataFilters must be null or a number between 1 and 31."); f = a } } function j() { var a = "Entity"; if (null != f) { var b = []; 1 == (1 & f) && b.push("Entity"), 2 == (2 & f) && b.push("Attribute"), 4 == (4 & f) && b.push("Relationship"), 8 == (8 & f) && b.push("Label"), 16 == (16 & f) && b.push("OptionSet"), a = b.join(" ") } var c = ""; return null != e && null != f && (c = ["<a:KeyValuePairOfstringanyType>", "<b:key>DeletedMetadataFilters</b:key>", '<b:value i:type="j:DeletedMetadataFilters">', a, "</b:value>", "</a:KeyValuePairOfstringanyType>"].join("")), c } function k() { return null == e ? "" : ["<a:KeyValuePairOfstringanyType>", "<b:key>ClientVersionStamp</b:key>", '<b:value i:type="c:string" >' + e + "</b:value>", "</a:KeyValuePairOfstringanyType>"].join("") } function l() { return ['<d:request i:type="a:RetrieveMetadataChangesRequest">', "<a:Parameters>", "<a:KeyValuePairOfstringanyType>", "<b:key>Query</b:key>", d.toXml(), "</a:KeyValuePairOfstringanyType>", k(), j(), "</a:Parameters>", '<a:RequestId i:nil="true" />', "<a:RequestName>RetrieveMetadataChanges</a:RequestName>", "</d:request>"].join("") } if (!(this instanceof Sdk.RetrieveMetadataChangesRequest)) return new Sdk.RetrieveMetadataChangesRequest(a, b, c); Sdk.OrganizationRequest.call(this); var d = null, e = null, f = null; "undefined" != typeof a && g(a), "undefined" != typeof b && h(b), "undefined" != typeof c && i(c), this.setResponseType(Sdk.RetrieveMetadataChangesResponse), this.setRequestXml(l()), this.setQuery = function (a) { g(a), this.setRequestXml(l()) }, this.setClientVersionStamp = function (a) { h(a), this.setRequestXml(l()) }, this.setDeletedMetadataFilters = function (a) { i(a), this.setRequestXml(l()) } }, this.RetrieveMetadataChangesRequest.__class = !0, this.RetrieveMetadataChangesResponse = function (a) { function f(a) { for (var b = 0; b < e.length; b++) if (a == e[b]) return !0; return !1 } function g(a) { if (null != a.attributes && 1 == a.attributes.length && null != a.attributes.getNamedItem("i:nil") && "true" == a.attributes.getNamedItem("i:nil").nodeValue) return null; if (null != a.firstChild && 3 == a.firstChild.nodeType) { var b = Sdk.Xml.getNodeName(a); switch (b) { case "ActivityTypeMask": case "ColumnNumber": case "DefaultFormValue": case "LanguageCode": case "MaxLength": case "MaxValue": case "MinValue": case "MobileClientAccessLevelMask": case "ObjectTypeCode": case "Order": case "Precision": case "PrecisionSource": return parseInt(a.firstChild.nodeValue, 10); case "AutoCreateAccessTeams": case "AutoRouteToOwnerQueue": case "CanBeBasic": case "CanBeChanged": case "CanBeDeep": case "CanBeGlobal": case "CanBeLocal": case "CanBeSecuredForCreate": case "CanBeSecuredForRead": case "CanBeSecuredForUpdate": case "CanTriggerWorkflow": case "IsActivity": case "IsActivityParty": case "IsAIRUpdated": case "IsAvailableOffline": case "IsBusinessProcessEnabled": case "IsChildEntity": case "IsCustomAttribute": case "IsCustomEntity": case "IsCustomOptionSet": case "IsCustomRelationship": case "IsDocumentManagementEnabled": case "IsEnabledForCharts": case "IsEnabledForTrace": case "IsGlobal": case "IsImportable": case "IsIntersect": case "IsManaged": case "IsManaged": case "IsPrimaryId": case "IsPrimaryName": case "IsQuickCreateEnabled": case "IsReadingPaneEnabled": case "IsSecured": case "IsValidForAdvancedFind": case "IsValidForCreate": case "IsValidForRead": case "IsValidForUpdate": case "IsVisibleInMobileClient": return "true" == a.firstChild.nodeValue; case "Value": if ("true" == a.firstChild.nodeValue || "false" == a.firstChild.nodeValue) return "true" == a.firstChild.nodeValue; if ("ApplicationRequired" == a.firstChild.nodeValue || "None" == a.firstChild.nodeValue || "Recommended" == a.firstChild.nodeValue || "SystemRequired" == a.firstChild.nodeValue) return a.firstChild.nodeValue; var c = parseInt(a.firstChild.nodeValue, 10); return isNaN(c) ? a.firstChild.nodeValue : c; default: return a.firstChild.nodeValue } } if (f(Sdk.Xml.getNodeName(a))) { for (var d = [], e = 0; e < a.childNodes.length; e++) { var h; h = null != a.childNodes[e].attributes && null != a.childNodes[e].attributes.getNamedItem("i:type") ? a.childNodes[e].attributes.getNamedItem("i:type").nodeValue.split(":")[1] : Sdk.Xml.getNodeName(a.childNodes[e]); var i = g(a.childNodes[e]); "string" != typeof i && "number" != typeof i && (i._type = h), d.push(i) } return d } if (0 == a.childNodes.length) return null; var j = {}; null != a.attributes.getNamedItem("i:type") && (j._type = a.attributes.getNamedItem("i:type").nodeValue.split(":")[1]); for (var e = 0; e < a.childNodes.length; e++) 3 == a.childNodes[e].nodeType ? j[Sdk.Xml.getNodeName(a.childNodes[e])] = a.childNodes[e].nodeValue : j[Sdk.Xml.getNodeName(a.childNodes[e])] = g(a.childNodes[e]); return j } function h(a) { for (var c = [], d = Sdk.Xml.selectSingleNode(a, "//a:KeyValuePairOfstringanyType[b:key='EntityMetadata']/b:value"), e = 0; e < d.childNodes.length; e++) { var f = g(d.childNodes[e]); f._type = "EntityMetadata", c.push(f) } b = c } function i(a) { c = Sdk.Xml.selectSingleNodeText(a, "//a:KeyValuePairOfstringanyType[b:key='ServerVersionStamp']/b:value") } function j(b) { var c = {}, e = Sdk.Xml.selectSingleNode(a, "//a:KeyValuePairOfstringanyType[b:key='DeletedMetadata']/b:value"); if (null != e) for (var f = 0; f < e.childNodes.length; f++) { var g = e.childNodes[f].firstChild; c[_getNodeText(g)] = []; for (var h = 0; h < g.nextSibling.childNodes.length; h++) { var i = _getNodeText(g.nextSibling.childNodes[h]); c[_getNodeText(g)].push(i) } } d = c } if (!(this instanceof Sdk.RetrieveMetadataChangesResponse)) return new Sdk.RetrieveMetadataChangesResponse(a); Sdk.OrganizationResponse.call(this); var b = null, c = null, d = null, e = ["Attributes", "ManyToManyRelationships", "ManyToOneRelationships", "OneToManyRelationships", "Privileges", "LocalizedLabels", "Options", "Targets"]; this.getEntityMetadata = function () { return b }, this.getServerVersionStamp = function () { return c }, this.getDeletedMetadata = function () { return d }, h(a), i(a), j(a) }, this.RetrieveMetadataChangesResponse.__class = !0 }.call(Sdk), function () { this.AttributeMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.AttributeQueryExpression = function (a, b) { return this instanceof Sdk.Mdq.AttributeQueryExpression ? void Sdk.Mdq.MetadataQueryExpression.call(this, a, b) : new Sdk.Mdq.AttributeQueryExpression(a, b) }, this.AttributeQueryExpression.__class = !0, this.DeletedMetadataFilters = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.EntityMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.EntityQueryExpression = function (a, b, c, d, e) { function i(a) { if (null == a) f = null; else { if (!(a instanceof Sdk.Mdq.AttributeQueryExpression)) throw new Error("Sdk.Mdq.EntityQueryExpression attributeQuery must be an Sdk.Mdq.AttributeQueryExpression"); f = a } } function j(a) { if (null == a) g = null; else { if (!(a instanceof Sdk.Mdq.RelationshipQueryExpression)) throw new Error("Sdk.Mdq.EntityQueryExpression relationshipQuery must be an Sdk.Mdq.RelationshipQueryExpression"); g = a } } function k(a) { if (null == a) h = null; else { if (!(a instanceof Sdk.Mdq.LabelQueryExpression)) throw new Error("Sdk.Mdq.EntityQueryExpression labelQuery must be an Sdk.Mdq.LabelQueryExpression"); h = a } } if (!(this instanceof Sdk.Mdq.EntityQueryExpression)) return new Sdk.Mdq.EntityQueryExpression(a, b, c, d, e); Sdk.Mdq.MetadataQueryExpression.call(this, a, b); var f = null, g = null, h = null; "undefined" != typeof c && i(c), "undefined" != typeof d && j(d), "undefined" != typeof e && k(e), this.getAttributeQuery = function () { return f }, this.setAttributeQuery = function (a) { i(a) }, this.getRelationshipQuery = function () { return g }, this.setRelationshipQuery = function (a) { j(a) }, this.getLabelQuery = function () { return h }, this.setLabelQuery = function (a) { k(a) } }, this.EntityQueryExpression.__class = !0, this.GuidValue = function (a) { if (!(this instanceof Sdk.Metadata.Query.GuidValue)) return new Sdk.Metadata.Query.GuidValue(a); var b = null; if (!/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(a)) throw new Error("Value passed as a Guid Value is not a valid Guid."); b = a, this.value = b }, this.GuidValue.__class = !0, this.LabelQueryExpression = function (a) { function c(a) { if ("undefined" == typeof a || "number" != typeof a) throw new Error("Sdk.Mdq.LabelQueryExpression language must be a number."); b.add(a) } function d(a) { var c = "Sdk.Mdq.LabelQueryExpression languages must be an array of numbers."; if ("undefined" == typeof a || "function" != typeof a.push) throw new Error(c); for (var d = 0; d < a.length; d++) if ("number" != typeof a[d]) throw new Error(c); b.addRange(a) } function e(a) { if ("number" != typeof a) throw new Error("Sdk.Mdq.LabelQueryExpression languages must be LCID number values."); b.remove(a) } if (!(this instanceof Sdk.Mdq.LabelQueryExpression)) return new Sdk.Mdq.LabelQueryExpression(a); var b = new Sdk.Collection(Number); "undefined" != typeof a && d(a), this.getLanguages = function () { return b }, this.addLanguage = function (a) { c(a) }, this.addLanguages = function (a) { d(a) }, this.removeLanguage = function (a) { e(a) } }, this.LabelQueryExpression.__class = !0, this.LogicalOperator = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.MetadataConditionExpression = function (a, b, c) { function o(a) { if (null == e) throw new Error(n); for (var b = !1, c = ["AttributeType", "OwnershipType", "RequiredLevel", "Format", "ImeMode", "SecurityTypes"], d = 0; d < c.length; d++) if (e == c[d]) { b = !0, j = i.Metadata; break } if (b) switch (e) { case "AttributeType": g = "AttributeTypeCode"; break; case "OwnershipType": g = "OwnershipTypes"; break; case "RequiredLevel": g = "AttributeRequiredLevel"; break; case "Format": var k = !1, l = !1, o = !1; for (var d in Sdk.Mdq.ValueEnums.DateTimeFormat) if (f == d) { g = "DateTimeFormat", k = !0; break } if (!k) for (var d in Sdk.Mdq.ValueEnums.IntegerFormat) if (f == d) { l = !0, g = "IntegerFormat"; break } if (!k && !l) for (var d in Sdk.Mdq.ValueEnums.StringFormat) if (f == d) { o = !0, g = "StringFormat"; break } if (!k && !l && !o) throw new Error("Unexpected attribute Format metadata enumeration."); break; case "ImeMode": g = "ImeMode"; break; case "SecurityTypes": g = "SecurityTypes" } else "string" != typeof a && "number" != typeof a && "boolean" != typeof a || (g = "number" == typeof a ? "int" : typeof a); if (h = "object" == typeof a && "function" == typeof a.push, h && !b) { if (j = i.Arrays, !(a.length > 0)) throw new Error(m); var p = typeof a[0]; if ("string" != p && "number" != p && "boolean" != p) throw new Error("Cannot determine the type of items in an array passed as a value to a Sdk.Mdq.MetadataConditionExpression."); g = "number" == p ? "int" : p } h || b || (j = i.XMLSchema) } function p(a) { if ("string" != typeof a) throw new Error(k); e = a, null != f && o(f) } function q(a) { for (var b in Sdk.Mdq.MetadataConditionOperator) if (a == b) return !0; return !1 } function r(a) { if (null == a) d = a; else { if (!q(a)) throw new Error(l); d = a } } function s(a) { if (null == a) f = null, g = "null"; else if (a instanceof Sdk.Mdq.GuidValue) f = a.value, g = "guid", j = i.Serialization; else { if ("undefined" == typeof a || null == a || "string" != typeof a && "number" != typeof a && "boolean" != typeof a && "object" != typeof a || "object" == typeof a && "undefined" == typeof a.push || "object" == typeof a && "function" == typeof a.push && 0 == a.length) throw new Error(m); o(a), f = a } } if (!(this instanceof Sdk.Mdq.MetadataConditionExpression)) return new Sdk.Mdq.MetadataConditionExpression(a, b, c); var d = null, e = null, f = null, g = null, h = !1, i = { Serialization: "e", Arrays: "f", Metadata: "h", XMLSchema: "c" }, j = null, k = "The propertyName parameter value must be a string.", l = "The conditionOperator parameter value must be an Sdk.Mdq.MetadataConditionOperator", m = "The value parameter must be either an array, a string, a number, a boolean value, or null. If an array, it must have at least one item.", n = "The MetadataConditionExpression property name must be known to validate the MetadataConditionExpression value."; void 0 != typeof a && p(a), void 0 != typeof b && r(b), void 0 != typeof c && s(c), this.getConditionOperator = function () { return d }, this.setConditionOperator = function (a) { r(a) }, this.getPropertyName = function () { return e }, this.setPropertyName = function (a) { p(a) }, this.getValue = function () { return f }, this.setValue = function (a) { s(a) }, this.getValueType = function () { return g }, this.getValueIsArray = function () { return h }, this.getValueNamespace = function () { return j } }, this.MetadataConditionExpression.__class = !0, this.MetadataConditionOperator = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.MetadataFilterExpression = function (a) { function e(a) { if (!(a instanceof Sdk.Mdq.MetadataConditionExpressionCollection)) throw new Error("Sdk.Mdq.MetadataFilterExpression Conditions requires a Sdk.Mdq.MetadataConditionExpressionCollection."); c = a } function f(a) { if (null == a || "Or" != a && "And" != a) throw new Error("Sdk.Mdq.MetadataFilterExpression FilterOperator requires a Sdk.Mdq.LogicalOperator."); b = a } function g(a) { c.add(a) } function h(a) { c.addRange(conditions) } function i(a) { if (!(filter instanceof Sdk.Mdq.MetadataFilterExpression)) throw new Error("Sdk.Mdq.MetadataFilterExpression addFilter filter parameter requires a Sdk.Mdq.MetadataFilterExpression)"); d.add(filter) } if (!(this instanceof Sdk.Mdq.MetadataFilterExpression)) return new Sdk.Mdq.MetadataFilterExpression(a); var b = Sdk.Mdq.LogicalOperator.And, c = new Sdk.Collection(Sdk.Mdq.MetadataConditionExpression), d = new Sdk.Collection(Sdk.Mdq.MetadataFilterExpression); "undefined" != typeof a && f(a), this.addCondition = function (a, b, c) { g(a instanceof Sdk.Mdq.MetadataConditionExpression ? a : new Sdk.Mdq.MetadataConditionExpression(a, b, c)) }, this.addConditions = function (a) { h(a) }, this.addFilter = function (a) { i(a) }, this.getConditions = function () { return c }, this.setConditions = function (a) { e(a) }, this.getFilterOperator = function () { return b }, this.setFilterOperator = function (a) { f(a) }, this.getFilters = function () { return d } }, this.MetadataFilterExpression.__class = !0, this.MetadataPropertiesExpression = function (a, b) { function e(a) { if ("boolean" != typeof a) throw new Error("The Sdk.Mdq.MetadataPropertiesExpression allProperties  must be an Boolean value."); c = a } function f(a) { if ("undefined" == typeof a.push) throw new Error("The Sdk.Mdq.MetadataPropertiesExpression propertyNames  must be an Array."); d = new Sdk.Collection(String, a) } if (!(this instanceof Sdk.Mdq.MetadataPropertiesExpression)) return new Sdk.Mdq.MetadataPropertiesExpression(a, b); var c = !0, d = new Sdk.Collection(String); "undefined" != typeof a && e(a), "undefined" != typeof b && f(b), this.addProperty = function (a) { d.add(a) }, this.addProperties = function (a) { d.addRange(a) }, this.getAllProperties = function () { return c }, this.setAllProperties = function (a) { e(a) }, this.getPropertyNames = function () { return d }, this.setPropertyNames = function (a) { f(a) } }, this.MetadataPropertiesExpression.__class = !0, this.MetadataQueryExpression = function (a, b) { function e(a) { if (!(a instanceof Sdk.Mdq.MetadataFilterExpression)) throw new Error("Sdk.Mdq.MetadataQueryExpression Criteria  must be an Sdk.Mdq.MetadataFilterExpression"); c = a } function f(a) { if (!(a instanceof Sdk.Mdq.MetadataPropertiesExpression)) throw new Error("Sdk.Mdq.MetadataQueryExpression Properties  must be an Sdk.Mdq.MetadataPropertiesExpression"); d = a } if (!(this instanceof Sdk.Mdq.MetadataQueryExpression)) return new Sdk.Mdq.MetadataQueryExpression(a, b); var c = new Sdk.Mdq.MetadataFilterExpression, d = new Sdk.Mdq.MetadataPropertiesExpression; "undefined" != typeof a && e(a), "undefined" != typeof b && f(b), this.getCriteria = function () { return c }, this.setCriteria = function (a) { e(a) }, this.getProperties = function () { return d }, this.setProperties = function (a) { f(a) } }, this.MetadataQueryExpression.__class = !0, this.RelationshipMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.RelationshipQueryExpression = function (a, b) { return this instanceof Sdk.Mdq.RelationshipQueryExpression ? void Sdk.Mdq.MetadataQueryExpression.call(this, a, b) : new Sdk.Mdq.RelationshipQueryExpression(a, b) }, this.RelationshipQueryExpression.__class = !0, this.SearchableAttributeMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.SearchableEntityMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.SearchableRelationshipMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum.") } }.call(Sdk.Mdq), function () { this.OwnershipType = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.AttributeTypeCode = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.AttributeRequiredLevel = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.DateTimeFormat = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.ImeMode = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.IntegerFormat = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.SecurityTypes = function () { throw new Error("Constructor not implemented this is a static enum.") }, this.StringFormat = function () { throw new Error("Constructor not implemented this is a static enum.") } }.call(Sdk.Mdq.ValueEnums), Sdk.RetrieveMetadataChangesRequest.prototype = new Sdk.OrganizationRequest, Sdk.RetrieveMetadataChangesResponse.prototype = new Sdk.OrganizationResponse, Sdk.Mdq.AttributeMetadataProperties.prototype = { AttributeOf: "AttributeOf", AttributeType: "AttributeType", AttributeTypeName: "AttributeTypeName", CalculationOf: "CalculationOf", CanBeSecuredForCreate: "CanBeSecuredForCreate", CanBeSecuredForRead: "CanBeSecuredForRead", CanBeSecuredForUpdate: "CanBeSecuredForUpdate", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", ColumnNumber: "ColumnNumber", DateTimeBehavior: "DateTimeBehavior", DefaultFormValue: "DefaultFormValue", DefaultValue: "DefaultValue", DeprecatedVersion: "DeprecatedVersion", Description: "Description", DisplayName: "DisplayName", EntityLogicalName: "EntityLogicalName", Format: "Format", FormatName: "FormatName", ImeMode: "ImeMode", IntroducedVersion: "IntroducedVersion", IsAuditEnabled: "IsAuditEnabled", IsCustomAttribute: "IsCustomAttribute", IsCustomizable: "IsCustomizable", IsManaged: "IsManaged", IsPrimaryId: "IsPrimaryId", IsPrimaryName: "IsPrimaryName", IsRenameable: "IsRenameable", IsSecured: "IsSecured", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForCreate: "IsValidForCreate", IsValidForRead: "IsValidForRead", IsValidForUpdate: "IsValidForUpdate", LinkedAttributeId: "LinkedAttributeId", LogicalName: "LogicalName", MaxLength: "MaxLength", MaxValue: "MaxValue", MetadataId: "MetadataId", MinValue: "MinValue", OptionSet: "OptionSet", Precision: "Precision", PrecisionSource: "PrecisionSource", RequiredLevel: "RequiredLevel", SchemaName: "SchemaName", Targets: "Targets", YomiOf: "YomiOf" }, Sdk.Mdq.AttributeMetadataProperties.AttributeOf = "AttributeOf", Sdk.Mdq.AttributeMetadataProperties.AttributeType = "AttributeType", Sdk.Mdq.AttributeMetadataProperties.AttributeTypeName = "AttributeTypeName", Sdk.Mdq.AttributeMetadataProperties.CalculationOf = "CalculationOf", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForCreate = "CanBeSecuredForCreate", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForRead = "CanBeSecuredForRead", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForUpdate = "CanBeSecuredForUpdate", Sdk.Mdq.AttributeMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.AttributeMetadataProperties.ColumnNumber = "ColumnNumber", Sdk.Mdq.AttributeMetadataProperties.DateTimeBehavior = "DateTimeBehavior", Sdk.Mdq.AttributeMetadataProperties.DefaultFormValue = "DefaultFormValue", Sdk.Mdq.AttributeMetadataProperties.DefaultValue = "DefaultValue", Sdk.Mdq.AttributeMetadataProperties.DeprecatedVersion = "DeprecatedVersion", Sdk.Mdq.AttributeMetadataProperties.Description = "Description", Sdk.Mdq.AttributeMetadataProperties.DisplayName = "DisplayName", Sdk.Mdq.AttributeMetadataProperties.EntityLogicalName = "EntityLogicalName", Sdk.Mdq.AttributeMetadataProperties.Format = "Format", Sdk.Mdq.AttributeMetadataProperties.FormatName = "FormatName", Sdk.Mdq.AttributeMetadataProperties.ImeMode = "ImeMode", Sdk.Mdq.AttributeMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.AttributeMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.AttributeMetadataProperties.IsCustomAttribute = "IsCustomAttribute", Sdk.Mdq.AttributeMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.AttributeMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.AttributeMetadataProperties.IsPrimaryId = "IsPrimaryId", Sdk.Mdq.AttributeMetadataProperties.IsPrimaryName = "IsPrimaryName", Sdk.Mdq.AttributeMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.AttributeMetadataProperties.IsSecured = "IsSecured", Sdk.Mdq.AttributeMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.AttributeMetadataProperties.IsValidForCreate = "IsValidForCreate", Sdk.Mdq.AttributeMetadataProperties.IsValidForRead = "IsValidForRead", Sdk.Mdq.AttributeMetadataProperties.IsValidForUpdate = "IsValidForUpdate", Sdk.Mdq.AttributeMetadataProperties.LinkedAttributeId = "LinkedAttributeId", Sdk.Mdq.AttributeMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.AttributeMetadataProperties.MaxLength = "MaxLength", Sdk.Mdq.AttributeMetadataProperties.MaxValue = "MaxValue", Sdk.Mdq.AttributeMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.AttributeMetadataProperties.MinValue = "MinValue", Sdk.Mdq.AttributeMetadataProperties.OptionSet = "OptionSet", Sdk.Mdq.AttributeMetadataProperties.Precision = "Precision", Sdk.Mdq.AttributeMetadataProperties.PrecisionSource = "PrecisionSource", Sdk.Mdq.AttributeMetadataProperties.RequiredLevel = "RequiredLevel", Sdk.Mdq.AttributeMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.AttributeMetadataProperties.Targets = "Targets", Sdk.Mdq.AttributeMetadataProperties.YomiOf = "YomiOf", Sdk.Mdq.AttributeMetadataProperties.__enum = !0, Sdk.Mdq.AttributeMetadataProperties.__flags = !0, Sdk.Mdq.AttributeQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.AttributeQueryExpression.prototype.toXml = function () { return 0 == this.getCriteria().getConditions().getCount() && 0 == this.getProperties().getPropertyNames().getCount() && 0 == this.getProperties().getAllProperties() ? '<j:AttributeQuery i:nil="true" />' : ["<j:AttributeQuery>", this.toValueXml(), "</j:AttributeQuery>"].join("") }, Sdk.Mdq.DeletedMetadataFilters.prototype = { Default: 1, Entity: 1, Attribute: 2, Relationship: 4, Label: 8, OptionSet: 16, All: 31 }, Sdk.Mdq.DeletedMetadataFilters.Default = 1, Sdk.Mdq.DeletedMetadataFilters.Entity = 1, Sdk.Mdq.DeletedMetadataFilters.Attribute = 2, Sdk.Mdq.DeletedMetadataFilters.Relationship = 4, Sdk.Mdq.DeletedMetadataFilters.Label = 8, Sdk.Mdq.DeletedMetadataFilters.OptionSet = 16, Sdk.Mdq.DeletedMetadataFilters.All = 31, Sdk.Mdq.DeletedMetadataFilters.__enum = !0, Sdk.Mdq.DeletedMetadataFilters.__flags = !0, Sdk.Mdq.EntityMetadataProperties.prototype = { ActivityTypeMask: "ActivityTypeMask", Attributes: "Attributes", AutoCreateAccessTeams: "AutoCreateAccessTeams", AutoRouteToOwnerQueue: "AutoRouteToOwnerQueue", CanBeInManyToMany: "CanBeInManyToMany", CanBePrimaryEntityInRelationship: "CanBePrimaryEntityInRelationship", CanBeRelatedEntityInRelationship: "CanBeRelatedEntityInRelationship", CanCreateAttributes: "CanCreateAttributes", CanCreateCharts: "CanCreateCharts", CanCreateForms: "CanCreateForms", CanCreateViews: "CanCreateViews", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", CanTriggerWorkflow: "CanTriggerWorkflow", Description: "Description", DisplayCollectionName: "DisplayCollectionName", DisplayName: "DisplayName", IconLargeName: "IconLargeName", IconMediumName: "IconMediumName", IconSmallName: "IconSmallName", IntroducedVersion: "IntroducedVersion", IsActivity: "IsActivity", IsActivityParty: "IsActivityParty", IsAIRUpdated: "IsAIRUpdated", IsAuditEnabled: "IsAuditEnabled", IsAvailableOffline: "IsAvailableOffline", IsBusinessProcessEnabled: "IsBusinessProcessEnabled", IsChildEntity: "IsChildEntity", IsConnectionsEnabled: "IsConnectionsEnabled", IsCustomEntity: "IsCustomEntity", IsCustomizable: "IsCustomizable", IsDocumentManagementEnabled: "IsDocumentManagementEnabled", IsDuplicateDetectionEnabled: "IsDuplicateDetectionEnabled", IsEnabledForCharts: "IsEnabledForCharts", IsImportable: "IsImportable", IsIntersect: "IsIntersect", IsMailMergeEnabled: "IsMailMergeEnabled", IsManaged: "IsManaged", IsMappable: "IsMappable", IsQuickCreateEnabled: "IsQuickCreateEnabled", IsReadingPaneEnabled: "IsReadingPaneEnabled", IsRenameable: "IsRenameable", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForQueue: "IsValidForQueue", IsVisibleInMobile: "IsVisibleInMobile", IsVisibleInMobileClient: "IsVisibleInMobileClient", LogicalName: "LogicalName", ManyToManyRelationships: "ManyToManyRelationships", ManyToOneRelationships: "ManyToOneRelationships", MetadataId: "MetadataId", ObjectTypeCode: "ObjectTypeCode", OneToManyRelationships: "OneToManyRelationships", OwnershipType: "OwnershipType", PrimaryIdAttribute: "PrimaryIdAttribute", PrimaryImageAttribute: "PrimaryImageAttribute", PrimaryNameAttribute: "PrimaryNameAttribute", Privileges: "Privileges", RecurrenceBaseEntityLogicalName: "RecurrenceBaseEntityLogicalName", ReportViewName: "ReportViewName", SchemaName: "SchemaName" }, Sdk.Mdq.EntityMetadataProperties.ActivityTypeMask = "ActivityTypeMask", Sdk.Mdq.EntityMetadataProperties.Attributes = "Attributes", Sdk.Mdq.EntityMetadataProperties.AutoCreateAccessTeams = "AutoCreateAccessTeams", Sdk.Mdq.EntityMetadataProperties.AutoRouteToOwnerQueue = "AutoRouteToOwnerQueue", Sdk.Mdq.EntityMetadataProperties.CanBeInManyToMany = "CanBeInManyToMany", Sdk.Mdq.EntityMetadataProperties.CanBePrimaryEntityInRelationship = "CanBePrimaryEntityInRelationship", Sdk.Mdq.EntityMetadataProperties.CanBeRelatedEntityInRelationship = "CanBeRelatedEntityInRelationship", Sdk.Mdq.EntityMetadataProperties.CanCreateAttributes = "CanCreateAttributes", Sdk.Mdq.EntityMetadataProperties.CanCreateCharts = "CanCreateCharts", Sdk.Mdq.EntityMetadataProperties.CanCreateForms = "CanCreateForms", Sdk.Mdq.EntityMetadataProperties.CanCreateViews = "CanCreateViews", Sdk.Mdq.EntityMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.EntityMetadataProperties.CanTriggerWorkflow = "CanTriggerWorkflow", Sdk.Mdq.EntityMetadataProperties.Description = "Description", Sdk.Mdq.EntityMetadataProperties.DisplayCollectionName = "DisplayCollectionName", Sdk.Mdq.EntityMetadataProperties.DisplayName = "DisplayName", Sdk.Mdq.EntityMetadataProperties.EntitySetName = "EntitySetName", Sdk.Mdq.EntityMetadataProperties.IconLargeName = "IconLargeName", Sdk.Mdq.EntityMetadataProperties.IconMediumName = "IconMediumName", Sdk.Mdq.EntityMetadataProperties.IconSmallName = "IconSmallName", Sdk.Mdq.EntityMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.EntityMetadataProperties.IsActivity = "IsActivity", Sdk.Mdq.EntityMetadataProperties.IsActivityParty = "IsActivityParty", Sdk.Mdq.EntityMetadataProperties.IsAIRUpdated = "IsAIRUpdated", Sdk.Mdq.EntityMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.EntityMetadataProperties.IsAvailableOffline = "IsAvailableOffline", Sdk.Mdq.EntityMetadataProperties.IsBusinessProcessEnabled = "IsBusinessProcessEnabled", Sdk.Mdq.EntityMetadataProperties.IsChildEntity = "IsChildEntity", Sdk.Mdq.EntityMetadataProperties.IsConnectionsEnabled = "IsConnectionsEnabled", Sdk.Mdq.EntityMetadataProperties.IsCustomEntity = "IsCustomEntity", Sdk.Mdq.EntityMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.EntityMetadataProperties.IsDocumentManagementEnabled = "IsDocumentManagementEnabled", Sdk.Mdq.EntityMetadataProperties.IsDuplicateDetectionEnabled = "IsDuplicateDetectionEnabled", Sdk.Mdq.EntityMetadataProperties.IsEnabledForCharts = "IsEnabledForCharts", Sdk.Mdq.EntityMetadataProperties.IsImportable = "IsImportable", Sdk.Mdq.EntityMetadataProperties.IsIntersect = "IsIntersect", Sdk.Mdq.EntityMetadataProperties.IsMailMergeEnabled = "IsMailMergeEnabled", Sdk.Mdq.EntityMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.EntityMetadataProperties.IsMappable = "IsMappable", Sdk.Mdq.EntityMetadataProperties.IsQuickCreateEnabled = "IsQuickCreateEnabled", Sdk.Mdq.EntityMetadataProperties.IsReadingPaneEnabled = "IsReadingPaneEnabled", Sdk.Mdq.EntityMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.EntityMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.EntityMetadataProperties.IsValidForQueue = "IsValidForQueue", Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobile = "IsVisibleInMobile", Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobileClient = "IsVisibleInMobileClient", Sdk.Mdq.EntityMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.EntityMetadataProperties.ManyToManyRelationships = "ManyToManyRelationships", Sdk.Mdq.EntityMetadataProperties.ManyToOneRelationships = "ManyToOneRelationships", Sdk.Mdq.EntityMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.EntityMetadataProperties.ObjectTypeCode = "ObjectTypeCode", Sdk.Mdq.EntityMetadataProperties.OneToManyRelationships = "OneToManyRelationships", Sdk.Mdq.EntityMetadataProperties.OwnershipType = "OwnershipType", Sdk.Mdq.EntityMetadataProperties.PrimaryIdAttribute = "PrimaryIdAttribute", Sdk.Mdq.EntityMetadataProperties.PrimaryImageAttribute = "PrimaryImageAttribute", Sdk.Mdq.EntityMetadataProperties.PrimaryNameAttribute = "PrimaryNameAttribute", Sdk.Mdq.EntityMetadataProperties.Privileges = "Privileges", Sdk.Mdq.EntityMetadataProperties.RecurrenceBaseEntityLogicalName = "RecurrenceBaseEntityLogicalName", Sdk.Mdq.EntityMetadataProperties.ReportViewName = "ReportViewName", Sdk.Mdq.EntityMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.EntityMetadataProperties.__enum = !0, Sdk.Mdq.EntityMetadataProperties.__flags = !0, Sdk.Mdq.EntityQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.EntityQueryExpression.prototype.toXml = function () { var a = null == this.getAttributeQuery() ? '<j:AttributeQuery i:nil="true" />' : this.getAttributeQuery().toXml(), b = null == this.getLabelQuery() ? '<j:LabelQuery i:nil="true" />' : this.getLabelQuery().toXml(), c = null == this.getRelationshipQuery() ? '<j:RelationshipQuery i:nil="true" />' : this.getRelationshipQuery().toXml(); return ['<b:value i:type="j:EntityQueryExpression">', this.toValueXml(), a, b, c, "</b:value>"].join("") }, Sdk.Mdq.LabelQueryExpression.prototype.toXml = function () { return 0 == this.getLanguages().getCount() ? '<j:LabelQuery i:nil="true" />' : ["<j:LabelQuery>", this.toValueXml(), "</j:LabelQuery>"].join("") }, Sdk.Mdq.LabelQueryExpression.prototype.toValueXml = function () { var a = ["<j:FilterLanguages>"]; return this.getLanguages().forEach(function (b, c) { a.push("<d:int>" + b + "</d:int>") }), a.push("</j:FilterLanguages>"), a.join("") }, Sdk.Mdq.LogicalOperator.prototype = { And: "And", Or: "Or" }, Sdk.Mdq.LogicalOperator.And = "And", Sdk.Mdq.LogicalOperator.Or = "Or", Sdk.Mdq.LogicalOperator.__enum = !0, Sdk.Mdq.LogicalOperator.__flags = !0, Sdk.Mdq.MetadataConditionExpression.prototype.toXml = function () { if (null == this.getConditionOperator() || null == this.getPropertyName() || null == this.getValueType()) throw new Error("A Sdk.Mdq.MetadataConditionExpression has properties that are null."); var a; if ("null" == this.getValueType()) a = '<j:Value i:nil="true" />'; else if (this.getValueIsArray()) { for (var b = ['<j:Value i:type="', this.getValueNamespace(), ":ArrayOf", this.getValueType(), '" >'], c = 0; c < this.getValue().length; c++) b.push(["<", this.getValueNamespace(), ":", this.getValueType(), ">", this.getValue()[c], "</", this.getValueNamespace(), ":", this.getValueType(), ">"].join("")); b.push("</j:Value>"), a = b.join("") } else a = ['<j:Value i:type="', this.getValueNamespace(), ":", this.getValueType(), '" >', this.getValue(), "</j:Value>"].join(""); return ["<j:MetadataConditionExpression>", "<j:ConditionOperator>" + this.getConditionOperator() + "</j:ConditionOperator>", "<j:PropertyName>" + this.getPropertyName() + "</j:PropertyName>", a, "</j:MetadataConditionExpression>"].join("") }, Sdk.Mdq.MetadataConditionOperator.prototype = { Equals: "Equals", NotEquals: "NotEquals", In: "In", NotIn: "NotIn", GreaterThan: "GreaterThan", LessThan: "LessThan" }, Sdk.Mdq.MetadataConditionOperator.Equals = "Equals", Sdk.Mdq.MetadataConditionOperator.NotEquals = "NotEquals", Sdk.Mdq.MetadataConditionOperator.In = "In", Sdk.Mdq.MetadataConditionOperator.NotIn = "NotIn", Sdk.Mdq.MetadataConditionOperator.GreaterThan = "GreaterThan", Sdk.Mdq.MetadataConditionOperator.LessThan = "LessThan", Sdk.Mdq.MetadataConditionOperator.__enum = !0, Sdk.Mdq.MetadataConditionOperator.__flags = !0,
Sdk.Mdq.MetadataFilterExpression.prototype.toValueXml = function () { var a = "<j:Conditions />"; if (this.getConditions().getCount() > 0) { var b = ["<j:Conditions>"]; this.getConditions().forEach(function (a, c) { b.push(a.toXml()) }), b.push("</j:Conditions>"), a = b.join("") } var c = "<j:Filters />"; if (this.getFilters().getCount() > 0) { var b = ["<j:Filters>"]; this.getFilters().forEach(function (a, c) { b.push(a.toXml()) }), b.push("</j:Filters>"), c = b.join("") } return [a, "<j:FilterOperator>" + this.getFilterOperator() + "</j:FilterOperator>", c].join("") }, Sdk.Mdq.MetadataPropertiesExpression.prototype.toXml = function () { var a = ["<j:AllProperties>", this.getAllProperties(), "</j:AllProperties>"].join(""), b = []; this.getPropertyNames().forEach(function (a, c) { b.push("<f:string>" + a + "</f:string>") }); var c = 0 == b.length ? "<j:PropertyNames />" : ["<j:PropertyNames>", b.join(""), "</j:PropertyNames>"].join(""); return [a, c].join("") }, Sdk.Mdq.MetadataQueryExpression.prototype.toValueXml = function () { var a = ["<j:Criteria>"]; return a.push(this.getCriteria().toValueXml()), a.push("</j:Criteria>"), a.push("<j:Properties>"), a.push(this.getProperties().toXml()), a.push("</j:Properties>"), a.join("") }, Sdk.Mdq.RelationshipMetadataProperties.prototype = { AssociatedMenuConfiguration: "AssociatedMenuConfiguration", CascadeConfiguration: "CascadeConfiguration", HasChanged: "HasChanged", Entity1AssociatedMenuConfiguration: "Entity1AssociatedMenuConfiguration", Entity1IntersectAttribute: "Entity1IntersectAttribute", Entity1LogicalName: "Entity1LogicalName", Entity2AssociatedMenuConfiguration: "Entity2AssociatedMenuConfiguration", Entity2IntersectAttribute: "Entity2IntersectAttribute", Entity2LogicalName: "Entity2LogicalName", IntersectEntityName: "IntersectEntityName", IntroducedVersion: "IntroducedVersion", IsCustomizable: "IsCustomizable", IsCustomRelationship: "IsCustomRelationship", IsManaged: "IsManaged", IsValidForAdvancedFind: "IsValidForAdvancedFind", MetadataId: "MetadataId", ReferencedAttribute: "ReferencedAttribute", ReferencedEntity: "ReferencedEntity", ReferencingAttribute: "ReferencingAttribute", ReferencingEntity: "ReferencingEntity", RelationshipType: "RelationshipType", SchemaName: "SchemaName", SecurityTypes: "SecurityTypes" }, Sdk.Mdq.RelationshipMetadataProperties.AssociatedMenuConfiguration = "AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.CascadeConfiguration = "CascadeConfiguration", Sdk.Mdq.RelationshipMetadataProperties.HasChanged = "HasChanged", Sdk.Mdq.RelationshipMetadataProperties.Entity1AssociatedMenuConfiguration = "Entity1AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.Entity1IntersectAttribute = "Entity1IntersectAttribute", Sdk.Mdq.RelationshipMetadataProperties.Entity1LogicalName = "Entity1LogicalName", Sdk.Mdq.RelationshipMetadataProperties.Entity2AssociatedMenuConfiguration = "Entity2AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.Entity2IntersectAttribute = "Entity2IntersectAttribute", Sdk.Mdq.RelationshipMetadataProperties.Entity2LogicalName = "Entity2LogicalName", Sdk.Mdq.RelationshipMetadataProperties.IntersectEntityName = "IntersectEntityName", Sdk.Mdq.RelationshipMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.RelationshipMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.RelationshipMetadataProperties.IsCustomRelationship = "IsCustomRelationship", Sdk.Mdq.RelationshipMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.RelationshipMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.RelationshipMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.RelationshipMetadataProperties.ReferencedAttribute = "ReferencedAttribute", Sdk.Mdq.RelationshipMetadataProperties.ReferencedEntity = "ReferencedEntity", Sdk.Mdq.RelationshipMetadataProperties.ReferencingAttribute = "ReferencingAttribute", Sdk.Mdq.RelationshipMetadataProperties.ReferencingEntity = "ReferencingEntity", Sdk.Mdq.RelationshipMetadataProperties.RelationshipType = "RelationshipType", Sdk.Mdq.RelationshipMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.RelationshipMetadataProperties.SecurityTypes = "SecurityTypes", Sdk.Mdq.RelationshipMetadataProperties.__enum = !0, Sdk.Mdq.RelationshipMetadataProperties.__flags = !0, Sdk.Mdq.RelationshipQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.RelationshipQueryExpression.prototype.toXml = function () { return 0 == this.getCriteria().getConditions().getCount() && 0 == this.getProperties().getProperties().getCount() && 0 == this.getProperties().getAllProperties() ? '<j:RelationshipQuery i:nil="true" />' : ["<j:RelationshipQuery>", this.toValueXml(), "</j:RelationshipQuery>"].join("") }, Sdk.Mdq.SearchableAttributeMetadataProperties.prototype = { AttributeOf: "AttributeOf", AttributeType: "AttributeType", CalculationOf: "CalculationOf", CanBeSecuredForCreate: "CanBeSecuredForCreate", CanBeSecuredForRead: "CanBeSecuredForRead", CanBeSecuredForUpdate: "CanBeSecuredForUpdate", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", ColumnNumber: "ColumnNumber", DateTimeBehavior: "DateTimeBehavior", DefaultFormValue: "DefaultFormValue", DefaultValue: "DefaultValue", DeprecatedVersion: "DeprecatedVersion", EntityLogicalName: "EntityLogicalName", Format: "Format", FormatName: "FormatName", ImeMode: "ImeMode", IntroducedVersion: "IntroducedVersion", IsAuditEnabled: "IsAuditEnabled", IsCustomAttribute: "IsCustomAttribute", IsCustomizable: "IsCustomizable", IsManaged: "IsManaged", IsPrimaryId: "IsPrimaryId", IsPrimaryName: "IsPrimaryName", IsRenameable: "IsRenameable", IsSecured: "IsSecured", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForCreate: "IsValidForCreate", IsValidForRead: "IsValidForRead", IsValidForUpdate: "IsValidForUpdate", LinkedAttributeId: "LinkedAttributeId", LogicalName: "LogicalName", MaxLength: "MaxLength", MaxValue: "MaxValue", MetadataId: "MetadataId", MinValue: "MinValue", Precision: "Precision", PrecisionSource: "PrecisionSource", RequiredLevel: "RequiredLevel", SchemaName: "SchemaName", YomiOf: "YomiOf" }, Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeOf = "AttributeOf", Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeType = "AttributeType", Sdk.Mdq.SearchableAttributeMetadataProperties.CalculationOf = "CalculationOf", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForCreate = "CanBeSecuredForCreate", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForRead = "CanBeSecuredForRead", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForUpdate = "CanBeSecuredForUpdate", Sdk.Mdq.SearchableAttributeMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.SearchableAttributeMetadataProperties.ColumnNumber = "ColumnNumber", Sdk.Mdq.SearchableAttributeMetadataProperties.DateTimeBehavior = "DateTimeBehavior", Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultFormValue = "DefaultFormValue", Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultValue = "DefaultValue", Sdk.Mdq.SearchableAttributeMetadataProperties.DeprecatedVersion = "DeprecatedVersion", Sdk.Mdq.SearchableAttributeMetadataProperties.EntityLogicalName = "EntityLogicalName", Sdk.Mdq.SearchableAttributeMetadataProperties.Format = "Format", Sdk.Mdq.SearchableAttributeMetadataProperties.FormatName = "FormatName", Sdk.Mdq.SearchableAttributeMetadataProperties.ImeMode = "ImeMode", Sdk.Mdq.SearchableAttributeMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableAttributeMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomAttribute = "IsCustomAttribute"; Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomizable = "IsCustomizable"; Sdk.Mdq.SearchableAttributeMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryId = "IsPrimaryId", Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryName = "IsPrimaryName", Sdk.Mdq.SearchableAttributeMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.SearchableAttributeMetadataProperties.IsSecured = "IsSecured", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForCreate = "IsValidForCreate", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForRead = "IsValidForRead", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForUpdate = "IsValidForUpdate", Sdk.Mdq.SearchableAttributeMetadataProperties.LinkedAttributeId = "LinkedAttributeId", Sdk.Mdq.SearchableAttributeMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.SearchableAttributeMetadataProperties.MaxLength = "MaxLength", Sdk.Mdq.SearchableAttributeMetadataProperties.MaxValue = "MaxValue", Sdk.Mdq.SearchableAttributeMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableAttributeMetadataProperties.MinValue = "MinValue", Sdk.Mdq.SearchableAttributeMetadataProperties.Precision = "Precision", Sdk.Mdq.SearchableAttributeMetadataProperties.PrecisionSource = "PrecisionSource", Sdk.Mdq.SearchableAttributeMetadataProperties.RequiredLevel = "RequiredLevel", Sdk.Mdq.SearchableAttributeMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableAttributeMetadataProperties.YomiOf = "YomiOf", Sdk.Mdq.SearchableAttributeMetadataProperties.__enum = !0, Sdk.Mdq.SearchableAttributeMetadataProperties.__flags = !0, Sdk.Mdq.SearchableEntityMetadataProperties.prototype = { ActivityTypeMask: "ActivityTypeMask", AutoCreateAccessTeams: "AutoCreateAccessTeams", AutoRouteToOwnerQueue: "AutoRouteToOwnerQueue", CanBeInManyToMany: "CanBeInManyToMany", CanBePrimaryEntityInRelationship: "CanBePrimaryEntityInRelationship", CanBeRelatedEntityInRelationship: "CanBeRelatedEntityInRelationship", CanCreateAttributes: "CanCreateAttributes", CanCreateCharts: "CanCreateCharts", CanCreateForms: "CanCreateForms", CanCreateViews: "CanCreateViews", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", CanTriggerWorkflow: "CanTriggerWorkflow", IconLargeName: "IconLargeName", IconMediumName: "IconMediumName", IconSmallName: "IconSmallName", IntroducedVersion: "IntroducedVersion", IsActivity: "IsActivity", IsActivityParty: "IsActivityParty", IsAIRUpdated: "IsAIRUpdated", IsAuditEnabled: "IsAuditEnabled", IsAvailableOffline: "IsAvailableOffline", IsBusinessProcessEnabled: "IsBusinessProcessEnabled", IsChildEntity: "IsChildEntity", IsConnectionsEnabled: "IsConnectionsEnabled", IsCustomEntity: "IsCustomEntity", IsCustomizable: "IsCustomizable", IsDocumentManagementEnabled: "IsDocumentManagementEnabled", IsDuplicateDetectionEnabled: "IsDuplicateDetectionEnabled", IsEnabledForCharts: "IsEnabledForCharts", IsImportable: "IsImportable", IsIntersect: "IsIntersect", IsMailMergeEnabled: "IsMailMergeEnabled", IsManaged: "IsManaged", IsMappable: "IsMappable", IsQuickCreateEnabled: "IsQuickCreateEnabled", IsReadingPaneEnabled: "IsReadingPaneEnabled", IsRenameable: "IsRenameable", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForQueue: "IsValidForQueue", IsVisibleInMobile: "IsVisibleInMobile", IsVisibleInMobileClient: "IsVisibleInMobileClient", LogicalName: "LogicalName", MetadataId: "MetadataId", ObjectTypeCode: "ObjectTypeCode", OwnershipType: "OwnershipType", PrimaryIdAttribute: "PrimaryIdAttribute", PrimaryImageAttribute: "PrimaryImageAttribute", PrimaryNameAttribute: "PrimaryNameAttribute", RecurrenceBaseEntityLogicalName: "RecurrenceBaseEntityLogicalName", ReportViewName: "ReportViewName", SchemaName: "SchemaName" }, Sdk.Mdq.SearchableEntityMetadataProperties.ActivityTypeMask = "ActivityTypeMask", Sdk.Mdq.SearchableEntityMetadataProperties.AutoCreateAccessTeams = "AutoCreateAccessTeams", Sdk.Mdq.SearchableEntityMetadataProperties.AutoRouteToOwnerQueue = "AutoRouteToOwnerQueue", Sdk.Mdq.SearchableEntityMetadataProperties.CanBeInManyToMany = "CanBeInManyToMany", Sdk.Mdq.SearchableEntityMetadataProperties.CanBePrimaryEntityInRelationship = "CanBePrimaryEntityInRelationship", Sdk.Mdq.SearchableEntityMetadataProperties.CanBeRelatedEntityInRelationship = "CanBeRelatedEntityInRelationship", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateAttributes = "CanCreateAttributes", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateCharts = "CanCreateCharts", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateForms = "CanCreateForms", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateViews = "CanCreateViews", Sdk.Mdq.SearchableEntityMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.SearchableEntityMetadataProperties.CanTriggerWorkflow = "CanTriggerWorkflow", Sdk.Mdq.SearchableEntityMetadataProperties.IconLargeName = "IconLargeName", Sdk.Mdq.SearchableEntityMetadataProperties.IconMediumName = "IconMediumName", Sdk.Mdq.SearchableEntityMetadataProperties.IconSmallName = "IconSmallName", Sdk.Mdq.SearchableEntityMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableEntityMetadataProperties.IsActivity = "IsActivity", Sdk.Mdq.SearchableEntityMetadataProperties.IsActivityParty = "IsActivityParty", Sdk.Mdq.SearchableEntityMetadataProperties.IsAIRUpdated = "IsAIRUpdated", Sdk.Mdq.SearchableEntityMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsAvailableOffline = "IsAvailableOffline", Sdk.Mdq.SearchableEntityMetadataProperties.IsBusinessProcessEnabled = "IsBusinessProcessEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsChildEntity = "IsChildEntity", Sdk.Mdq.SearchableEntityMetadataProperties.IsConnectionsEnabled = "IsConnectionsEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomEntity = "IsCustomEntity", Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.SearchableEntityMetadataProperties.IsDocumentManagementEnabled = "IsDocumentManagementEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsDuplicateDetectionEnabled = "IsDuplicateDetectionEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsEnabledForCharts = "IsEnabledForCharts", Sdk.Mdq.SearchableEntityMetadataProperties.IsImportable = "IsImportable", Sdk.Mdq.SearchableEntityMetadataProperties.IsIntersect = "IsIntersect", Sdk.Mdq.SearchableEntityMetadataProperties.IsMailMergeEnabled = "IsMailMergeEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableEntityMetadataProperties.IsMappable = "IsMappable", Sdk.Mdq.SearchableEntityMetadataProperties.IsQuickCreateEnabled = "IsQuickCreateEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsReadingPaneEnabled = "IsReadingPaneEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForQueue = "IsValidForQueue", Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobile = "IsVisibleInMobile", Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobileClient = "IsVisibleInMobileClient", Sdk.Mdq.SearchableEntityMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.SearchableEntityMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableEntityMetadataProperties.ObjectTypeCode = "ObjectTypeCode", Sdk.Mdq.SearchableEntityMetadataProperties.OwnershipType = "OwnershipType", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryIdAttribute = "PrimaryIdAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryImageAttribute = "PrimaryImageAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryNameAttribute = "PrimaryNameAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.RecurrenceBaseEntityLogicalName = "RecurrenceBaseEntityLogicalName", Sdk.Mdq.SearchableEntityMetadataProperties.ReportViewName = "ReportViewName", Sdk.Mdq.SearchableEntityMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableEntityMetadataProperties.__enum = !0, Sdk.Mdq.SearchableEntityMetadataProperties.__flags = !0, Sdk.Mdq.SearchableRelationshipMetadataProperties.prototype = { Entity1IntersectAttribute: "Entity1IntersectAttribute", Entity1LogicalName: "Entity1LogicalName", Entity2IntersectAttribute: "Entity2IntersectAttribute", Entity2LogicalName: "Entity2LogicalName", IntersectEntityName: "IntersectEntityName", IntroducedVersion: "IntroducedVersion", IsCustomizable: "IsCustomizable", IsCustomRelationship: "IsCustomRelationship", IsManaged: "IsManaged", IsValidForAdvancedFind: "IsValidForAdvancedFind", MetadataId: "MetadataId", ReferencedAttribute: "ReferencedAttribute", ReferencedEntity: "ReferencedEntity", ReferencingAttribute: "ReferencingAttribute", ReferencingEntity: "ReferencingEntity", RelationshipType: "RelationshipType", SchemaName: "SchemaName", SecurityTypes: "SecurityTypes" }, Sdk.Mdq.SearchableRelationshipMetadataProperties.HasChanged = "HasChanged", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1IntersectAttribute = "Entity1IntersectAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1LogicalName = "Entity1LogicalName", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2IntersectAttribute = "Entity2IntersectAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2LogicalName = "Entity2LogicalName", Sdk.Mdq.SearchableRelationshipMetadataProperties.IntersectEntityName = "IntersectEntityName", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.SearchableRelationshipMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomRelationship = "IsCustomRelationship", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableRelationshipMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedAttribute = "ReferencedAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedEntity = "ReferencedEntity", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingAttribute = "ReferencingAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingEntity = "ReferencingEntity", Sdk.Mdq.SearchableRelationshipMetadataProperties.RelationshipType = "RelationshipType", Sdk.Mdq.SearchableRelationshipMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableRelationshipMetadataProperties.SecurityTypes = "SecurityTypes", Sdk.Mdq.SearchableRelationshipMetadataProperties.__enum = !0, Sdk.Mdq.SearchableRelationshipMetadataProperties.__flags = !0, Sdk.Mdq.ValueEnums.OwnershipType.prototype = { None: "None", OrganizationOwned: "OrganizationOwned", TeamOwned: "TeamOwned", UserOwned: "UserOwned" }, Sdk.Mdq.ValueEnums.OwnershipType.None = "None", Sdk.Mdq.ValueEnums.OwnershipType.OrganizationOwned = "OrganizationOwned", Sdk.Mdq.ValueEnums.OwnershipType.TeamOwned = "TeamOwned", Sdk.Mdq.ValueEnums.OwnershipType.UserOwned = "UserOwned", Sdk.Mdq.ValueEnums.OwnershipType.__enum = !0, Sdk.Mdq.ValueEnums.OwnershipType.__flags = !0, Sdk.Mdq.ValueEnums.AttributeTypeCode.prototype = { BigInt: "BigInt", Boolean: "Boolean", CalendarRules: "CalendarRules", Customer: "Customer", DateTime: "DateTime", Decimal: "Decimal", Double: "Double", EntityName: "EntityName", Integer: "Integer", Lookup: "Lookup", ManagedProperty: "ManagedProperty", Memo: "Memo", Money: "Money", Owner: "Owner", PartyList: "PartyList", Picklist: "Picklist", State: "State", Status: "Status", String: "String", Uniqueidentifier: "Uniqueidentifier", Virtual: "Virtual" }, Sdk.Mdq.ValueEnums.AttributeTypeCode.BigInt = "BigInt", Sdk.Mdq.ValueEnums.AttributeTypeCode.Boolean = "Boolean", Sdk.Mdq.ValueEnums.AttributeTypeCode.CalendarRules = "CalendarRules", Sdk.Mdq.ValueEnums.AttributeTypeCode.Customer = "Customer", Sdk.Mdq.ValueEnums.AttributeTypeCode.DateTime = "DateTime", Sdk.Mdq.ValueEnums.AttributeTypeCode.Decimal = "Decimal", Sdk.Mdq.ValueEnums.AttributeTypeCode.Double = "Double", Sdk.Mdq.ValueEnums.AttributeTypeCode.EntityName = "EntityName", Sdk.Mdq.ValueEnums.AttributeTypeCode.Integer = "Integer", Sdk.Mdq.ValueEnums.AttributeTypeCode.Lookup = "Lookup", Sdk.Mdq.ValueEnums.AttributeTypeCode.ManagedProperty = "ManagedProperty", Sdk.Mdq.ValueEnums.AttributeTypeCode.Memo = "Memo", Sdk.Mdq.ValueEnums.AttributeTypeCode.Money = "Money", Sdk.Mdq.ValueEnums.AttributeTypeCode.Owner = "Owner", Sdk.Mdq.ValueEnums.AttributeTypeCode.PartyList = "PartyList", Sdk.Mdq.ValueEnums.AttributeTypeCode.Picklist = "Picklist", Sdk.Mdq.ValueEnums.AttributeTypeCode.State = "State", Sdk.Mdq.ValueEnums.AttributeTypeCode.Status = "Status", Sdk.Mdq.ValueEnums.AttributeTypeCode.String = "String", Sdk.Mdq.ValueEnums.AttributeTypeCode.Uniqueidentifier = "Uniqueidentifier", Sdk.Mdq.ValueEnums.AttributeTypeCode.Virtual = "Virtual", Sdk.Mdq.ValueEnums.AttributeTypeCode.__enum = !0, Sdk.Mdq.ValueEnums.AttributeTypeCode.__flags = !0, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.prototype = { ApplicationRequired: "ApplicationRequired", None: "None", Recommended: "Recommended", SystemRequired: "SystemRequired" }, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.ApplicationRequired = "ApplicationRequired", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.None = "None", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.Recommended = "Recommended", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.SystemRequired = "SystemRequired", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.__enum = !0, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.__flags = !0, Sdk.Mdq.ValueEnums.DateTimeFormat.prototype = { DateAndTime: "DateAndTime", DateOnly: "DateOnly" }, Sdk.Mdq.ValueEnums.DateTimeFormat.DateAndTime = "DateAndTime", Sdk.Mdq.ValueEnums.DateTimeFormat.DateOnly = "DateOnly", Sdk.Mdq.ValueEnums.DateTimeFormat.__enum = !0, Sdk.Mdq.ValueEnums.DateTimeFormat.__flags = !0, Sdk.Mdq.ValueEnums.ImeMode.prototype = { Active: "Active", Auto: "Auto", Disabled: "Disabled", Inactive: "Inactive" }, Sdk.Mdq.ValueEnums.ImeMode.Active = "Active", Sdk.Mdq.ValueEnums.ImeMode.Auto = "Auto", Sdk.Mdq.ValueEnums.ImeMode.Disabled = "Disabled", Sdk.Mdq.ValueEnums.ImeMode.Inactive = "Inactive", Sdk.Mdq.ValueEnums.ImeMode.__enum = !0, Sdk.Mdq.ValueEnums.ImeMode.__flags = !0, Sdk.Mdq.ValueEnums.IntegerFormat.prototype = { Duration: "Duration", Language: "Language", Locale: "Locale", None: "None", TimeZone: "TimeZone" }, Sdk.Mdq.ValueEnums.IntegerFormat.Duration = "Duration", Sdk.Mdq.ValueEnums.IntegerFormat.Language = "Language", Sdk.Mdq.ValueEnums.IntegerFormat.Locale = "Locale", Sdk.Mdq.ValueEnums.IntegerFormat.None = "None", Sdk.Mdq.ValueEnums.IntegerFormat.TimeZone = "TimeZone", Sdk.Mdq.ValueEnums.IntegerFormat.__enum = !0, Sdk.Mdq.ValueEnums.IntegerFormat.__flags = !0, Sdk.Mdq.ValueEnums.SecurityTypes.prototype = { Append: "Append", Inheritance: "Inheritance", None: "None", ParentChild: "ParentChild", Pointer: "Pointer" }, Sdk.Mdq.ValueEnums.SecurityTypes.Append = "Append", Sdk.Mdq.ValueEnums.SecurityTypes.Inheritance = "Inheritance", Sdk.Mdq.ValueEnums.SecurityTypes.None = "None", Sdk.Mdq.ValueEnums.SecurityTypes.ParentChild = "ParentChild", Sdk.Mdq.ValueEnums.SecurityTypes.Pointer = "Pointer", Sdk.Mdq.ValueEnums.SecurityTypes.__enum = !0, Sdk.Mdq.ValueEnums.SecurityTypes.__flags = !0, Sdk.Mdq.ValueEnums.StringFormat.prototype = { Email: "Email", PhoneticGuide: "PhoneticGuide", Text: "Text", TextArea: "TextArea", TickerSymbol: "TickerSymbol", Url: "Url", VersionNumber: "VersionNumber" }, Sdk.Mdq.ValueEnums.StringFormat.Email = "Email", Sdk.Mdq.ValueEnums.StringFormat.PhoneticGuide = "PhoneticGuide", Sdk.Mdq.ValueEnums.StringFormat.Text = "Text", Sdk.Mdq.ValueEnums.StringFormat.TextArea = "TextArea", Sdk.Mdq.ValueEnums.StringFormat.TickerSymbol = "TickerSymbol", Sdk.Mdq.ValueEnums.StringFormat.Url = "Url", Sdk.Mdq.ValueEnums.StringFormat.VersionNumber = "VersionNumber", Sdk.Mdq.ValueEnums.StringFormat.__enum = !0, Sdk.Mdq.ValueEnums.StringFormat.__flags = !0;
