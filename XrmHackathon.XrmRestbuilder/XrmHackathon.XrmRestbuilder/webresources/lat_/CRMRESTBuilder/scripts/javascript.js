// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: http://codemirror.net/LICENSE

!function (a) { "object" == typeof exports && "object" == typeof module ? a(require("../../lib/codemirror")) : "function" == typeof define && define.amd ? define(["../../lib/codemirror"], a) : a(CodeMirror) }(function (a) { "use strict"; function b(a, b, c) { return /^(?:operator|sof|keyword c|case|new|[\[{}\(,;:]|=>)$/.test(b.lastType) || "quasi" == b.lastType && /\{\s*$/.test(a.string.slice(0, a.pos - (c || 0))) } a.defineMode("javascript", function (c, d) { function n(a) { for (var c, b = !1, d = !1; null != (c = a.next()) ;) { if (!b) { if ("/" == c && !d) return; "[" == c ? d = !0 : d && "]" == c && (d = !1) } b = !b && "\\" == c } } function q(a, b, c) { return o = a, p = c, b } function r(a, c) { var d = a.next(); if ('"' == d || "'" == d) return c.tokenize = s(d), c.tokenize(a, c); if ("." == d && a.match(/^\d+(?:[eE][+\-]?\d+)?/)) return q("number", "number"); if ("." == d && a.match("..")) return q("spread", "meta"); if (/[\[\]{}\(\),;\:\.]/.test(d)) return q(d); if ("=" == d && a.eat(">")) return q("=>", "operator"); if ("0" == d && a.eat(/x/i)) return a.eatWhile(/[\da-f]/i), q("number", "number"); if ("0" == d && a.eat(/o/i)) return a.eatWhile(/[0-7]/i), q("number", "number"); if ("0" == d && a.eat(/b/i)) return a.eatWhile(/[01]/i), q("number", "number"); if (/\d/.test(d)) return a.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/), q("number", "number"); if ("/" == d) return a.eat("*") ? (c.tokenize = t, t(a, c)) : a.eat("/") ? (a.skipToEnd(), q("comment", "comment")) : b(a, c, 1) ? (n(a), a.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/), q("regexp", "string-2")) : (a.eatWhile(l), q("operator", "operator", a.current())); if ("`" == d) return c.tokenize = u, u(a, c); if ("#" == d) return a.skipToEnd(), q("error", "error"); if (l.test(d)) return a.eatWhile(l), q("operator", "operator", a.current()); if (j.test(d)) { a.eatWhile(j); var e = a.current(), f = k.propertyIsEnumerable(e) && k[e]; return f && "." != c.lastType ? q(f.type, f.style, e) : q("variable", "variable", e) } } function s(a) { return function (b, c) { var e, d = !1; if (g && "@" == b.peek() && b.match(m)) return c.tokenize = r, q("jsonld-keyword", "meta"); for (; null != (e = b.next()) && (e != a || d) ;) d = !d && "\\" == e; return d || (c.tokenize = r), q("string", "string") } } function t(a, b) { for (var d, c = !1; d = a.next() ;) { if ("/" == d && c) { b.tokenize = r; break } c = "*" == d } return q("comment", "comment") } function u(a, b) { for (var d, c = !1; null != (d = a.next()) ;) { if (!c && ("`" == d || "$" == d && a.eat("{"))) { b.tokenize = r; break } c = !c && "\\" == d } return q("quasi", "string-2", a.current()) } function w(a, b) { b.fatArrowAt && (b.fatArrowAt = null); var c = a.string.indexOf("=>", a.start); if (!(c < 0)) { for (var d = 0, e = !1, f = c - 1; f >= 0; --f) { var g = a.string.charAt(f), h = v.indexOf(g); if (h >= 0 && h < 3) { if (!d) { ++f; break } if (0 == --d) { "(" == g && (e = !0); break } } else if (h >= 3 && h < 6)++d; else if (j.test(g)) e = !0; else { if (/["'\/]/.test(g)) return; if (e && !d) { ++f; break } } } e && !d && (b.fatArrowAt = f) } } function y(a, b, c, d, e, f) { this.indented = a, this.column = b, this.type = c, this.prev = e, this.info = f, null != d && (this.align = d) } function z(a, b) { for (var c = a.localVars; c; c = c.next) if (c.name == b) return !0; for (var d = a.context; d; d = d.prev) for (var c = d.vars; c; c = c.next) if (c.name == b) return !0 } function A(a, b, c, d, e) { var f = a.cc; for (B.state = a, B.stream = e, B.marked = null, B.cc = f, B.style = b, a.lexical.hasOwnProperty("align") || (a.lexical.align = !0) ; ;) { var g = f.length ? f.pop() : h ? M : L; if (g(c, d)) { for (; f.length && f[f.length - 1].lex;) f.pop()(); return B.marked ? B.marked : "variable" == c && z(a, d) ? "variable-2" : b } } } function C() { for (var a = arguments.length - 1; a >= 0; a--) B.cc.push(arguments[a]) } function D() { return C.apply(null, arguments), !0 } function E(a) { function b(b) { for (var c = b; c; c = c.next) if (c.name == a) return !0; return !1 } var c = B.state; if (B.marked = "def", c.context) { if (b(c.localVars)) return; c.localVars = { name: a, next: c.localVars } } else { if (b(c.globalVars)) return; d.globalVars && (c.globalVars = { name: a, next: c.globalVars }) } } function G() { B.state.context = { prev: B.state.context, vars: B.state.localVars }, B.state.localVars = F } function H() { B.state.localVars = B.state.context.vars, B.state.context = B.state.context.prev } function I(a, b) { var c = function () { var c = B.state, d = c.indented; if ("stat" == c.lexical.type) d = c.lexical.indented; else for (var e = c.lexical; e && ")" == e.type && e.align; e = e.prev) d = e.indented; c.lexical = new y(d, B.stream.column(), a, null, c.lexical, b) }; return c.lex = !0, c } function J() { var a = B.state; a.lexical.prev && (")" == a.lexical.type && (a.indented = a.lexical.indented), a.lexical = a.lexical.prev) } function K(a) { function b(c) { return c == a ? D() : ";" == a ? C() : D(b) } return b } function L(a, b) { return "var" == a ? D(I("vardef", b.length), oa, K(";"), J) : "keyword a" == a ? D(I("form"), O, L, J) : "keyword b" == a ? D(I("form"), L, J) : "{" == a ? D(I("}"), ga, J) : ";" == a ? D() : "if" == a ? ("else" == B.state.lexical.info && B.state.cc[B.state.cc.length - 1] == J && B.state.cc.pop()(), D(I("form"), O, L, J, ta)) : "function" == a ? D(za) : "for" == a ? D(I("form"), ua, L, J) : "variable" == a ? D(I("stat"), _) : "switch" == a ? D(I("form"), O, I("}", "switch"), K("{"), ga, J, J) : "case" == a ? D(M, K(":")) : "default" == a ? D(K(":")) : "catch" == a ? D(I("form"), G, K("("), Aa, K(")"), L, J, H) : "class" == a ? D(I("form"), Ba, J) : "export" == a ? D(I("stat"), Fa, J) : "import" == a ? D(I("stat"), Ga, J) : "module" == a ? D(I("form"), pa, I("}"), K("{"), ga, J, J) : "type" == a ? D(ja, K("operator"), ja, K(";")) : "async" == a ? D(L) : C(I("stat"), M, K(";"), J) } function M(a) { return P(a, !1) } function N(a) { return P(a, !0) } function O(a) { return "(" != a ? C() : D(I(")"), M, K(")"), J) } function P(a, b) { if (B.state.fatArrowAt == B.stream.start) { var c = b ? X : W; if ("(" == a) return D(G, I(")"), ea(pa, ")"), J, K("=>"), c, H); if ("variable" == a) return C(G, pa, K("=>"), c, H) } var d = b ? T : S; return x.hasOwnProperty(a) ? D(d) : "function" == a ? D(za, d) : "keyword c" == a || "async" == a ? D(b ? R : Q) : "(" == a ? D(I(")"), Q, K(")"), J, d) : "operator" == a || "spread" == a ? D(b ? N : M) : "[" == a ? D(I("]"), Ka, J, d) : "{" == a ? fa(ba, "}", null, d) : "quasi" == a ? C(U, d) : "new" == a ? D(Y(b)) : D() } function Q(a) { return a.match(/[;\}\)\],]/) ? C() : C(M) } function R(a) { return a.match(/[;\}\)\],]/) ? C() : C(N) } function S(a, b) { return "," == a ? D(M) : T(a, b, !1) } function T(a, b, c) { var d = 0 == c ? S : T, e = 0 == c ? M : N; return "=>" == a ? D(G, c ? X : W, H) : "operator" == a ? /\+\+|--/.test(b) ? D(d) : "?" == b ? D(M, K(":"), e) : D(e) : "quasi" == a ? C(U, d) : ";" != a ? "(" == a ? fa(N, ")", "call", d) : "." == a ? D(aa, d) : "[" == a ? D(I("]"), Q, K("]"), J, d) : void 0 : void 0 } function U(a, b) { return "quasi" != a ? C() : "${" != b.slice(b.length - 2) ? D(U) : D(M, V) } function V(a) { if ("}" == a) return B.marked = "string-2", B.state.tokenize = u, D(U) } function W(a) { return w(B.stream, B.state), C("{" == a ? L : M) } function X(a) { return w(B.stream, B.state), C("{" == a ? L : N) } function Y(a) { return function (b) { return "." == b ? D(a ? $ : Z) : C(a ? N : M) } } function Z(a, b) { if ("target" == b) return B.marked = "keyword", D(S) } function $(a, b) { if ("target" == b) return B.marked = "keyword", D(T) } function _(a) { return ":" == a ? D(J, L) : C(S, K(";"), J) } function aa(a) { if ("variable" == a) return B.marked = "property", D() } function ba(a, b) { return "async" == a ? (B.marked = "property", D(ba)) : "variable" == a || "keyword" == B.style ? (B.marked = "property", D("get" == b || "set" == b ? ca : da)) : "number" == a || "string" == a ? (B.marked = g ? "property" : B.style + " property", D(da)) : "jsonld-keyword" == a ? D(da) : "modifier" == a ? D(ba) : "[" == a ? D(M, K("]"), da) : "spread" == a ? D(M) : ":" == a ? C(da) : void 0 } function ca(a) { return "variable" != a ? C(da) : (B.marked = "property", D(za)) } function da(a) { return ":" == a ? D(N) : "(" == a ? C(za) : void 0 } function ea(a, b) { function c(d, e) { if ("," == d) { var f = B.state.lexical; return "call" == f.info && (f.pos = (f.pos || 0) + 1), D(function (c, d) { return c == b || d == b ? C() : C(a) }, c) } return d == b || e == b ? D() : D(K(b)) } return function (d, e) { return d == b || e == b ? D() : C(a, c) } } function fa(a, b, c) { for (var d = 3; d < arguments.length; d++) B.cc.push(arguments[d]); return D(I(b, c), ea(a, b), J) } function ga(a) { return "}" == a ? D() : C(L, ga) } function ha(a, b) { if (i) { if (":" == a) return D(ja); if ("?" == b) return D(ha) } } function ia(a, b) { if ("=" == b) return D(N) } function ja(a) { return "variable" == a ? (B.marked = "variable-3", D(na)) : "{" == a ? D(ea(la, "}")) : "(" == a ? D(ea(ma, ")"), ka) : void 0 } function ka(a) { if ("=>" == a) return D(ja) } function la(a) { return "variable" == a || "keyword" == B.style ? (B.marked = "property", D(la)) : ":" == a ? D(ja) : void 0 } function ma(a) { return "variable" == a ? D(ma) : ":" == a ? D(ja) : void 0 } function na(a, b) { return "<" == b ? D(ea(ja, ">"), na) : "[" == a ? D(K("]"), na) : void 0 } function oa() { return C(pa, ha, ra, sa) } function pa(a, b) { return "modifier" == a ? D(pa) : "variable" == a ? (E(b), D()) : "spread" == a ? D(pa) : "[" == a ? fa(pa, "]") : "{" == a ? fa(qa, "}") : void 0 } function qa(a, b) { return "variable" != a || B.stream.match(/^\s*:/, !1) ? ("variable" == a && (B.marked = "property"), "spread" == a ? D(pa) : "}" == a ? C() : D(K(":"), pa, ra)) : (E(b), D(ra)) } function ra(a, b) { if ("=" == b) return D(N) } function sa(a) { if ("," == a) return D(oa) } function ta(a, b) { if ("keyword b" == a && "else" == b) return D(I("form", "else"), L, J) } function ua(a) { if ("(" == a) return D(I(")"), va, K(")"), J) } function va(a) { return "var" == a ? D(oa, K(";"), xa) : ";" == a ? D(xa) : "variable" == a ? D(wa) : C(M, K(";"), xa) } function wa(a, b) { return "in" == b || "of" == b ? (B.marked = "keyword", D(M)) : D(S, xa) } function xa(a, b) { return ";" == a ? D(ya) : "in" == b || "of" == b ? (B.marked = "keyword", D(M)) : C(M, K(";"), ya) } function ya(a) { ")" != a && D(M) } function za(a, b) { return "*" == b ? (B.marked = "keyword", D(za)) : "variable" == a ? (E(b), D(za)) : "(" == a ? D(G, I(")"), ea(Aa, ")"), J, ha, L, H) : void 0 } function Aa(a) { return "spread" == a ? D(Aa) : C(pa, ha, ia) } function Ba(a, b) { if ("variable" == a) return E(b), D(Ca) } function Ca(a, b) { return "extends" == b ? D(i ? ja : M, Ca) : "{" == a ? D(I("}"), Da, J) : void 0 } function Da(a, b) { return "variable" == a || "keyword" == B.style ? ("static" == b || "get" == b || "set" == b || i && ("public" == b || "private" == b || "protected" == b)) && B.stream.match(/^\s+[\w$\xa1-\uffff]/, !1) ? (B.marked = "keyword", D(Da)) : (B.marked = "property", D(i ? Ea : za, Da)) : "*" == b ? (B.marked = "keyword", D(Da)) : ";" == a ? D(Da) : "}" == a ? D() : void 0 } function Ea(a) { return ":" == a ? D(ja) : C(za) } function Fa(a, b) { return "*" == b ? (B.marked = "keyword", D(Ja, K(";"))) : "default" == b ? (B.marked = "keyword", D(M, K(";"))) : C(L) } function Ga(a) { return "string" == a ? D() : C(Ha, Ja) } function Ha(a, b) { return "{" == a ? fa(Ha, "}") : ("variable" == a && E(b), "*" == b && (B.marked = "keyword"), D(Ia)) } function Ia(a, b) { if ("as" == b) return B.marked = "keyword", D(Ha) } function Ja(a, b) { if ("from" == b) return B.marked = "keyword", D(M) } function Ka(a) { return "]" == a ? D() : C(ea(N, "]")) } function La(a, b) { return "operator" == a.lastType || "," == a.lastType || l.test(b.charAt(0)) || /[,.]/.test(b.charAt(0)) } var o, p, e = c.indentUnit, f = d.statementIndent, g = d.jsonld, h = d.json || g, i = d.typescript, j = d.wordCharacters || /[\w$\xa1-\uffff]/, k = function () { function a(a) { return { type: a, style: "keyword" } } var b = a("keyword a"), c = a("keyword b"), d = a("keyword c"), e = a("operator"), f = { type: "atom", style: "atom" }, g = { if: a("if"), while: b, with: b, else: c, do: c, try: c, finally: c, return: d, break: d, continue: d, new: a("new"), delete: d, throw: d, debugger: d, var: a("var"), const: a("var"), let: a("var"), function: a("function"), catch: a("catch"), for: a("for"), switch: a("switch"), case: a("case"), default: a("default"), in: e, typeof: e, instanceof: e, true: f, false: f, null: f, undefined: f, NaN: f, Infinity: f, this: a("this"), class: a("class"), super: a("atom"), yield: d, export: a("export"), import: a("import"), extends: d, await: d, async: a("async") }; if (i) { var h = { type: "variable", style: "variable-3" }, j = { interface: a("class"), implements: d, namespace: d, module: a("module"), enum: a("module"), type: a("type"), public: a("modifier"), private: a("modifier"), protected: a("modifier"), abstract: a("modifier"), as: e, string: h, number: h, boolean: h, any: h }; for (var k in j) g[k] = j[k] } return g }(), l = /[+\-*&%=<>!?|~^]/, m = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/, v = "([{}])", x = { atom: !0, number: !0, variable: !0, string: !0, regexp: !0, this: !0, "jsonld-keyword": !0 }, B = { state: null, column: null, marked: null, cc: null }, F = { name: "this", next: { name: "arguments" } }; return J.lex = !0, { startState: function (a) { var b = { tokenize: r, lastType: "sof", cc: [], lexical: new y((a || 0) - e, 0, "block", !1), localVars: d.localVars, context: d.localVars && { vars: d.localVars }, indented: a || 0 }; return d.globalVars && "object" == typeof d.globalVars && (b.globalVars = d.globalVars), b }, token: function (a, b) { if (a.sol() && (b.lexical.hasOwnProperty("align") || (b.lexical.align = !1), b.indented = a.indentation(), w(a, b)), b.tokenize != t && a.eatSpace()) return null; var c = b.tokenize(a, b); return "comment" == o ? c : (b.lastType = "operator" != o || "++" != p && "--" != p ? o : "incdec", A(b, c, o, p, a)) }, indent: function (b, c) { if (b.tokenize == t) return a.Pass; if (b.tokenize != r) return 0; var i, g = c && c.charAt(0), h = b.lexical; if (!/^\s*else\b/.test(c)) for (var j = b.cc.length - 1; j >= 0; --j) { var k = b.cc[j]; if (k == J) h = h.prev; else if (k != ta) break } for (; ("stat" == h.type || "form" == h.type) && ("}" == g || (i = b.cc[b.cc.length - 1]) && (i == S || i == T) && !/^[,\.=+\-*:?[\(]/.test(c)) ;) h = h.prev; f && ")" == h.type && "stat" == h.prev.type && (h = h.prev); var l = h.type, m = g == l; return "vardef" == l ? h.indented + ("operator" == b.lastType || "," == b.lastType ? h.info + 1 : 0) : "form" == l && "{" == g ? h.indented : "form" == l ? h.indented + e : "stat" == l ? h.indented + (La(b, c) ? f || e : 0) : "switch" != h.info || m || 0 == d.doubleIndentSwitch ? h.align ? h.column + (m ? 0 : 1) : h.indented + (m ? 0 : e) : h.indented + (/^(?:case|default)\b/.test(c) ? e : 2 * e) }, electricInput: /^\s*(?:case .*?:|default:|\{|\})$/, blockCommentStart: h ? null : "/*", blockCommentEnd: h ? null : "*/", lineComment: h ? null : "//", fold: "brace", closeBrackets: "()[]{}''\"\"``", helperType: h ? "json" : "javascript", jsonldMode: g, jsonMode: h, expressionAllowed: b, skipExpression: function (a) { var b = a.cc[a.cc.length - 1]; b != M && b != N || a.cc.pop() } } }), a.registerHelper("wordChars", "javascript", /[\w$]/), a.defineMIME("text/javascript", "javascript"), a.defineMIME("text/ecmascript", "javascript"), a.defineMIME("application/javascript", "javascript"), a.defineMIME("application/x-javascript", "javascript"), a.defineMIME("application/ecmascript", "javascript"), a.defineMIME("application/json", { name: "javascript", json: !0 }), a.defineMIME("application/x-json", { name: "javascript", json: !0 }), a.defineMIME("application/ld+json", { name: "javascript", jsonld: !0 }), a.defineMIME("text/typescript", { name: "javascript", typescript: !0 }), a.defineMIME("application/typescript", { name: "javascript", typescript: !0 }) });