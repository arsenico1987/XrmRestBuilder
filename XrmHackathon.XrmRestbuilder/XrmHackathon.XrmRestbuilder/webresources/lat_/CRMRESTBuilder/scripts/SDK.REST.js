// =====================================================================
//  This file is part of the Microsoft Dynamics CRM SDK code samples.
//
//  Copyright (C) Microsoft Corporation.  All rights reserved.
//
//  This source code is intended only as a supplement to Microsoft
//  Development Tools and/or on-line documentation.  See these other
//  materials for detailed information regarding Microsoft code samples.
//
//  THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//  PARTICULAR PURPOSE.
// =====================================================================
// <snippetSDKRESTJS>
"undefined" == typeof SDK && (SDK = { __namespace: !0 }), SDK.REST = { _context: function () { if ("undefined" != typeof GetGlobalContext) return GetGlobalContext(); if ("undefined" != typeof Xrm) return Xrm.Page.context; throw new Error("Context is not available.") }, _getClientUrl: function () { var a = this._context().getClientUrl(); return a }, _ODataPath: function () { return this._getClientUrl() + "/XRMServices/2011/OrganizationData.svc/" }, _errorHandler: function (a) { if (12029 == a.status) return new Error("The attempt to connect to the server failed."); if (12007 == a.status) return new Error("The server name could not be resolved."); var b; try { b = JSON.parse(a.responseText).error.message.value } catch (c) { b = a.responseText } return new Error("Error : " + a.status + ": " + a.statusText + ": " + b) }, _dateReviver: function (a, b) { var c; return "string" == typeof b && (c = /Date\(([-+]?\d+)\)/.exec(b)) ? new Date(parseInt(b.replace("/Date(", "").replace(")/", ""), 10)) : b }, _parameterCheck: function (a, b) { if ("undefined" == typeof a || null === a) throw new Error(b) }, _stringParameterCheck: function (a, b) { if ("string" != typeof a) throw new Error(b) }, _callbackParameterCheck: function (a, b) { if ("function" != typeof a) throw new Error(b) }, createRecord: function (a, b, c, d) { this._parameterCheck(a, "SDK.REST.createRecord requires the object parameter."), this._stringParameterCheck(b, "SDK.REST.createRecord requires the type parameter is a string."), this._callbackParameterCheck(c, "SDK.REST.createRecord requires the successCallback is a function."), this._callbackParameterCheck(d, "SDK.REST.createRecord requires the errorCallback is a function."); var e = new XMLHttpRequest; e.open("POST", encodeURI(this._ODataPath() + b + "Set"), !0), e.setRequestHeader("Accept", "application/json"), e.setRequestHeader("Content-Type", "application/json; charset=utf-8"), e.onreadystatechange = function () { 4 == this.readyState && (e.onreadystatechange = null, 201 == this.status ? c(JSON.parse(this.responseText, SDK.REST._dateReviver).d) : d(SDK.REST._errorHandler(this))) }, e.send(JSON.stringify(a)) }, retrieveRecord: function (a, b, c, d, e, f) { this._stringParameterCheck(a, "SDK.REST.retrieveRecord requires the id parameter is a string."), this._stringParameterCheck(b, "SDK.REST.retrieveRecord requires the type parameter is a string."), null != c && this._stringParameterCheck(c, "SDK.REST.retrieveRecord requires the select parameter is a string."), null != d && this._stringParameterCheck(d, "SDK.REST.retrieveRecord requires the expand parameter is a string."), this._callbackParameterCheck(e, "SDK.REST.retrieveRecord requires the successCallback parameter is a function."), this._callbackParameterCheck(f, "SDK.REST.retrieveRecord requires the errorCallback parameter is a function."); var g = ""; if (null != c || null != d) { if (g = "?", null != c) { var h = "$select=" + c; null != d && (h = h + "," + d), g += h } null != d && (g = g + "&$expand=" + d) } var i = new XMLHttpRequest; i.open("GET", encodeURI(this._ODataPath() + b + "Set(guid'" + a + "')" + g), !0), i.setRequestHeader("Accept", "application/json"), i.setRequestHeader("Content-Type", "application/json; charset=utf-8"), i.onreadystatechange = function () { 4 == this.readyState && (i.onreadystatechange = null, 200 == this.status ? e(JSON.parse(this.responseText, SDK.REST._dateReviver).d) : f(SDK.REST._errorHandler(this))) }, i.send() }, updateRecord: function (a, b, c, d, e) { this._stringParameterCheck(a, "SDK.REST.updateRecord requires the id parameter."), this._parameterCheck(b, "SDK.REST.updateRecord requires the object parameter."), this._stringParameterCheck(c, "SDK.REST.updateRecord requires the type parameter."), this._callbackParameterCheck(d, "SDK.REST.updateRecord requires the successCallback is a function."), this._callbackParameterCheck(e, "SDK.REST.updateRecord requires the errorCallback is a function."); var f = new XMLHttpRequest; f.open("POST", encodeURI(this._ODataPath() + c + "Set(guid'" + a + "')"), !0), f.setRequestHeader("Accept", "application/json"), f.setRequestHeader("Content-Type", "application/json; charset=utf-8"), f.setRequestHeader("X-HTTP-Method", "MERGE"), f.onreadystatechange = function () { 4 == this.readyState && (f.onreadystatechange = null, 204 == this.status || 1223 == this.status ? d() : e(SDK.REST._errorHandler(this))) }, f.send(JSON.stringify(b)) }, deleteRecord: function (a, b, c, d) { this._stringParameterCheck(a, "SDK.REST.deleteRecord requires the id parameter."), this._stringParameterCheck(b, "SDK.REST.deleteRecord requires the type parameter."), this._callbackParameterCheck(c, "SDK.REST.deleteRecord requires the successCallback is a function."), this._callbackParameterCheck(d, "SDK.REST.deleteRecord requires the errorCallback is a function."); var e = new XMLHttpRequest; e.open("POST", encodeURI(this._ODataPath() + b + "Set(guid'" + a + "')"), !0), e.setRequestHeader("Accept", "application/json"), e.setRequestHeader("Content-Type", "application/json; charset=utf-8"), e.setRequestHeader("X-HTTP-Method", "DELETE"), e.onreadystatechange = function () { 4 == this.readyState && (e.onreadystatechange = null, 204 == this.status || 1223 == this.status ? c() : d(SDK.REST._errorHandler(this))) }, e.send() }, retrieveMultipleRecords: function (a, b, c, d, e) { this._stringParameterCheck(a, "SDK.REST.retrieveMultipleRecords requires the type parameter is a string."), null != b && this._stringParameterCheck(b, "SDK.REST.retrieveMultipleRecords requires the options parameter is a string."), this._callbackParameterCheck(c, "SDK.REST.retrieveMultipleRecords requires the successCallback parameter is a function."), this._callbackParameterCheck(d, "SDK.REST.retrieveMultipleRecords requires the errorCallback parameter is a function."), this._callbackParameterCheck(e, "SDK.REST.retrieveMultipleRecords requires the OnComplete parameter is a function."); var f; null != b && (f = "?" != b.charAt(0) ? "?" + b : b); var g = new XMLHttpRequest; g.open("GET", this._ODataPath() + a + "Set" + f, !0), g.setRequestHeader("Accept", "application/json"), g.setRequestHeader("Content-Type", "application/json; charset=utf-8"), g.onreadystatechange = function () { if (4 == this.readyState) if (g.onreadystatechange = null, 200 == this.status) { var b = JSON.parse(this.responseText, SDK.REST._dateReviver).d; if (c(b.results), null != b.__next) { var f = b.__next.substring((SDK.REST._ODataPath() + a + "Set").length); SDK.REST.retrieveMultipleRecords(a, f, c, d, e) } else e() } else d(SDK.REST._errorHandler(this)) }, g.send() }, associateRecords: function (a, b, c, d, e, f, g) { this._stringParameterCheck(a, "SDK.REST.associateRecords requires the parentId parameter is a string."), this._stringParameterCheck(b, "SDK.REST.associateRecords requires the parentType parameter is a string."), this._stringParameterCheck(c, "SDK.REST.associateRecords requires the relationshipName parameter is a string."), this._stringParameterCheck(d, "SDK.REST.associateRecords requires the childId parameter is a string."), this._stringParameterCheck(e, "SDK.REST.associateRecords requires the childType parameter is a string."), this._callbackParameterCheck(f, "SDK.REST.associateRecords requires the successCallback parameter is a function."), this._callbackParameterCheck(g, "SDK.REST.associateRecords requires the errorCallback parameter is a function."); var h = new XMLHttpRequest; h.open("POST", encodeURI(this._ODataPath() + b + "Set(guid'" + a + "')/$links/" + c), !0), h.setRequestHeader("Accept", "application/json"), h.setRequestHeader("Content-Type", "application/json; charset=utf-8"), h.onreadystatechange = function () { 4 == this.readyState && (h.onreadystatechange = null, 204 == this.status || 1223 == this.status ? f() : g(SDK.REST._errorHandler(this))) }; var i = {}; i.uri = this._ODataPath() + "/" + e + "Set(guid'" + d + "')", h.send(JSON.stringify(i)) }, disassociateRecords: function (a, b, c, d, e, f) { this._stringParameterCheck(a, "SDK.REST.disassociateRecords requires the parentId parameter is a string."), this._stringParameterCheck(b, "SDK.REST.disassociateRecords requires the parentType parameter is a string."), this._stringParameterCheck(c, "SDK.REST.disassociateRecords requires the relationshipName parameter is a string."), this._stringParameterCheck(d, "SDK.REST.disassociateRecords requires the childId parameter is a string."), this._callbackParameterCheck(e, "SDK.REST.disassociateRecords requires the successCallback parameter is a function."), this._callbackParameterCheck(f, "SDK.REST.disassociateRecords requires the errorCallback parameter is a function."); var g = new XMLHttpRequest; g.open("POST", encodeURI(this._ODataPath() + b + "Set(guid'" + a + "')/$links/" + c + "(guid'" + d + "')"), !0), g.setRequestHeader("Accept", "application/json"), g.setRequestHeader("Content-Type", "application/json; charset=utf-8"), g.setRequestHeader("X-HTTP-Method", "DELETE"), g.onreadystatechange = function () { 4 == this.readyState && (g.onreadystatechange = null, 204 == this.status || 1223 == this.status ? e() : f(SDK.REST._errorHandler(this))) }, g.send() }, __namespace: !0 };